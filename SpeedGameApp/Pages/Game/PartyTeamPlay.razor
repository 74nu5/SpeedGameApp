@page "/party/{PartyId:guid}/team/{TeamId:guid}/play"
@using SpeedGameApp.DataEnum
@using SpeedGameApp.Shared.Components.Responses
@using SpeedGameApp.Shared.Components
@inherits PartyPageBase
<PageTitle>Speed Game App - Equipe @(this.CurrentTeam.Name) - Partie en cours</PageTitle>

<div class="row row-cols-1 row-cols-md-2 g-4">

    <div class="col p-3 @(this.CurrentTeam.Buzz ? "text-white bg-success" : "bg-light")">
        <h3>Equipe @(this.CurrentTeam.Name)</h3>

        <h4>Score de l'équipe : @(this.CurrentTeam.Score)</h4>
        
        @if (this.CurrentParty.IsTimerEnabled)
        {
            <Timer @ref="this.timerComponent" Time="@this.time"/>
        }
        

        <hr/>

        @switch (this.CurrentParty.CurrentResponseType)
        {
            case ResponseType.None:
                break;
            case ResponseType.Buzzer:
                <Buzzer Buzz="this.BuzzTeam" AlreadyResponse="@(this.CurrentParty.HasResponse)"/>
                break;
            case ResponseType.Proposition:
                <Proposition @ref="@(this.proposition)" ResponseCallback="this.Callback" AlreadyResponse="@(this.CurrentParty.HasResponse)"/>
                break;
            case ResponseType.TimedProposition:
                <TimedProposition ResponseCallback="this.Callback" Enabled="this.responseEnabled" />
                break;
            case ResponseType.Qcm:
                <QCM Question="this.CurrentParty.CurrentQcm" ResponseCallback="this.CallbackQcm"/>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
    <div class="col">
        <div class="card">
            <div class="card-header">
                Autres équipes
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var team in this.CurrentParty.TeamsSortedByScore)
                {
                    <li class="d-flex list-group-item @(this.GetTeamCss(team)) justify-content-between">
                        <span>@team.Name : @team.Score</span><span class="text-end">@(!string.IsNullOrEmpty(team.Response) ? $"Réponse : {team.Response} " : string.Empty)</span>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
@if (this.CurrentParty.ShowThemes)
{
    <div class="container">
        <h1>Thèmes de musique pour un blind test</h1>
        <div class="row row-cols-1 row-cols-md-6 g-4">
            @{
                var index = 0;
            }
            @foreach (var theme in this.CurrentParty.RandomThemes)
            {
                index++;
                <div class="cursor-pointer col" @onclick="() => this.SelectThemeAsync(theme)">
                    <div class="@(this.GetCardCss(theme))">
                        <div class="card-body">
                            <h5 class="card-title">@index</h5>
                            @if (theme.AlreadyTaken)
                            {
                                <p>@theme.Name</p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}