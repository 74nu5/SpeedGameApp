<div class="card text-black">
    <div class="card-header">
        Proposition
    </div>
    <div class="card-body">
        <EditForm Model="this.response" OnValidSubmit="this.Callback">
            <fieldset disabled="@(this.AlreadyResponse)">
                <InputText class="form-control proposition" type="text" placeholder="Réponse" @ref="this.inputResponse" @bind-Value="this.response"/>
                <button class="btn btn-success w-100" type="submit">Valider</button>
            </fieldset>
        </EditForm>
    </div>
</div>

@code {

    private InputText? inputResponse;

    private string response = string.Empty;

    [Parameter]
    public EventCallback<string> ResponseCallback { get; set; }

    [Parameter]
    public bool AlreadyResponse { get; set; }

    private async Task Callback()
        => await this.ResponseCallback.InvokeAsync(this.response).ConfigureAwait(true);

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var inputResponseElement = this.inputResponse?.Element;
        if (inputResponseElement is not null)
            await inputResponseElement.Value.FocusAsync().ConfigureAwait(true);
    }

    public async Task ResetAsync(bool resetResponse)
    {
        if (resetResponse)
        {
            this.response = string.Empty;
            this.AlreadyResponse = false;
        }

        var inputText = this.inputResponse;
        if (inputText is { Element: not null })
            await inputText.Element.Value.FocusAsync().ConfigureAwait(true);

        await this.InvokeAsync(this.StateHasChanged).ConfigureAwait(true);
    }

}